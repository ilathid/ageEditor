"""Subclass of MainFrame, which is generated by wxFormBuilder."""

import wx
import MainFrame
from Minimap import Minimap
import os.path
from XmlIO import xmlSerialize
from SerializableAge import XMLHotspot
from SerializableAge import XMLMusic
from SerializableAge import XMLMovie
from IlathidHotspotDialog import IlathidHotspotDialog
from wx.lib.agw.toasterbox import ToasterBox
import shutil
from wx._core import WXK_ESCAPE

# display width of images
IMG_WIDTH = 512
IMG_ZOOM = 0.5

def distance(x, y, x2, y2):
    import math
    return math.sqrt((x - x2) ** 2 + (y - y2) ** 2)

class FileListRightClickMenu(wx.Menu):

    def __init__(self, parentFrame, ageDir, slideName, fileList, fileId, fileListUpdatedCallback):
        wx.Menu.__init__(self, "")

        self.ageDir = ageDir
        self.slideName = slideName
        self.fileList = fileList
        self.fileListUpdatedCallback = fileListUpdatedCallback
        self.fileId = fileId
        self.parentFrame = parentFrame

        importOne = wx.MenuItem(self, wx.ID_ANY, "Import one image")
        # importOne.SetBitmap(icon_3d)
        importOne = self.AppendItem(importOne)
        self.Bind(wx.EVT_MENU, self.onImportOne, id=importOne.GetId())

        importBlenderEnvmap = wx.MenuItem(self, wx.ID_ANY, "Import cube map generated by blender")
        # importBlenderEnvmap.SetBitmap(icon_2d)
        importBlenderEnvmap = self.AppendItem(importBlenderEnvmap)
        self.Bind(wx.EVT_MENU, self.onImportBlenderEnvmap, id=importBlenderEnvmap.GetId())

    # user asked to import an environment map from blender
    def onImportBlenderEnvmap(self, evt):

        envmapfile = wx.LoadFileSelector("Select the blender-generated env map", "*")
        if envmapfile is None or len(envmapfile) == 0:
            return
        if not envmapfile.endswith(".png") and not envmapfile.endswith(".jpg") and not envmapfile.endswith(".jpeg"):
            wx.MessageBox("An image of PNG or JPEG format is expected")

        self.parentFrame.latestSlideDir = os.path.dirname(envmapfile)
        #print "latestSlideDir = ", self.parentFrame.latestSlideDir

        self.parentFrame.doImportCubeMap(envmapfile, self.slideName)


    def onImportOne(self, evt):
        slidefile = wx.LoadFileSelector("Select the slide", "*")
        if slidefile is None or len(slidefile) == 0:
            return
        if not slidefile.endswith(".png") and not slidefile.endswith(".jpg") and not slidefile.endswith(".jpeg"):
            wx.MessageBox("An image of PNG or JPEG format is expected")

        bmp = wx.Bitmap(slidefile, wx.BITMAP_TYPE_ANY)

        if not (bmp.GetWidth() == 1024 and bmp.GetHeight() == 768):
            wx.MessageBox("The preferred size for slides is 1024x768")
            return

        COMPRESSION = "90"  # 0 is terrible, 100 is high-quality

        slides_path = os.path.join(self.ageDir, "slides")
        img = bmp.ConvertToImage()
        img.SetOption(wx.IMAGE_OPTION_QUALITY, COMPRESSION)
        img.SaveFile(os.path.join(slides_path, self.slideName + ".jpg"), wx.BITMAP_TYPE_JPEG)

        # TODO: archive support
        self.fileList.SetCellValue(self.fileId, 0, str(self.slideName + ".jpg"))
        self.fileList.SetCellValue(self.fileId, 1, "")

        self.fileListUpdatedCallback()


class DeleteRightClickMenu(wx.Menu):

    def __init__(self, deleteCallback):
        wx.Menu.__init__(self, "")

        self.deleteCallback = deleteCallback
        deleteItem = wx.MenuItem(self, wx.ID_ANY, "Delete this item")
        deleteItem = self.AppendItem(deleteItem)
        self.Bind(wx.EVT_MENU, self.onDeleteItem, id=deleteItem.GetId())

    def onDeleteItem(self, evt):
        self.deleteCallback()


# =================================================================================================
# =================================================================================================

TOOL_RECTANGLE = 1
TOOL_POLYGON = 2

# Implementing MainFrame
class IlathidAgeEditorMainFrame(MainFrame.MainFrame):
    def __init__(self, parent, ageDir, age):
        MainFrame.MainFrame.__init__(self, parent)
        self.ageDir = ageDir
        self.age = age
        self.ignoreNameChangeEvent = False
        self.tool = TOOL_RECTANGLE
        self.backgroundImg = None
        self.latestSlideDir = None

        bgImagePath = os.path.join(ageDir, "minimap.png")

        if os.path.exists(bgImagePath):
            self.backgroundImg = wx.Bitmap(bgImagePath, wx.BITMAP_TYPE_PNG)
        else:
            bgImagePath = os.path.join(ageDir, "minimap.jpg")
            if os.path.exists(bgImagePath):
                self.backgroundImg = wx.Bitmap(bgImagePath, wx.BITMAP_TYPE_JPEG)

        self.minimap = Minimap(self, self.leftPanel, self.age, self.backgroundImg, lambda sp: self.standpointSelected(sp),
                               lambda: self.onModification(), lambda name: self.onCreateStandpoint(name))
        self.leftPanel.GetSizer().Add(self.minimap, 1, wx.EXPAND)

        self.m_slideImages.SetBackgroundStyle(wx.BG_STYLE_PAINT)
        self.m_slideImages.Bind(wx.EVT_PAINT, self.onPaintSlideImages)

        self.m_fileList.UseNativeColHeader(True)
        self.m_fileList.Enable(False)
        self.m_onEntrance.Enable(False)
        self.m_onExit.Enable(False)
        self.m_toolBar.EnableTool(wx.ID_SAVE_TOOL, False)

        self.slideImages = []

        self.middleMouseButtonDown = False
        self.m_slideImages.Bind(wx.EVT_MIDDLE_DOWN, self.onMiddleMouseButtonDown)
        self.m_slideImages.Bind(wx.EVT_MIDDLE_UP, self.onMiddleMouseButtonUp)
        self.m_slideImages.Bind(wx.EVT_MOTION, self.onMouseMove)
        self.m_slideImages.Bind(wx.EVT_MOUSE_CAPTURE_LOST, self.onMiddleMouseButtonUp)

        self.m_slideImages.Bind(wx.EVT_LEFT_DOWN, self.onMouseButtonDown)
        self.m_slideImages.Bind(wx.EVT_LEFT_UP, self.onMouseButtonUp)
        self.m_slideImages.Bind(wx.EVT_KEY_DOWN, self.onKeyDown)

        self.addingHotspot = False
        self.addingPolygonHotspot = False
        self.resizingHotspot = False
        self.resizingPolygonalHotspot = False

        # format [x, y, w, h]
        self.addingHotspotCoords = [0, 0, 0, 0]

        from collections import OrderedDict
        self.cursors = OrderedDict([('forward', wx.Bitmap('data/cursors/fwd.png', wx.BITMAP_TYPE_PNG)),
                                    ('action', wx.Bitmap('data/cursors/fist.png', wx.BITMAP_TYPE_PNG)),
                                    ('grab', wx.Bitmap('data/cursors/grab.png', wx.BITMAP_TYPE_PNG)),
                                    ('left', wx.Bitmap('data/cursors/left.png', wx.BITMAP_TYPE_PNG)),
                                    ('right', wx.Bitmap('data/cursors/right.png', wx.BITMAP_TYPE_PNG)),
                                    ('up', wx.Bitmap('data/cursors/up.png', wx.BITMAP_TYPE_PNG)),
                                    ('down', wx.Bitmap('data/cursors/down.png', wx.BITMAP_TYPE_PNG)),
                                    ('zip', wx.Bitmap('data/cursors/zip.png', wx.BITMAP_TYPE_PNG)),
                                    ('magnifyP', wx.Bitmap('data/cursors/plus.png', wx.BITMAP_TYPE_PNG)),
                                    ('magnifyM', wx.Bitmap('data/cursors/minus.png', wx.BITMAP_TYPE_PNG))])

        self.panCursor = wx.StockCursor(wx.CURSOR_SIZING)
        self.resizeVerticallyCursor = wx.StockCursor(wx.CURSOR_SIZENS)
        self.resizeHorizontallyCursor = wx.StockCursor(wx.CURSOR_SIZEWE)
        self.moveCursor = wx.StockCursor(wx.wx.CURSOR_SIZING)

        self.m_musicsList.AppendRows(len(self.age.getMusics()))
        music_id = 0
        for music in self.age.getMusics():
            self.m_musicsList.SetCellValue(music_id, 0, music.getId())
            self.m_musicsList.SetCellValue(music_id, 1, music.getFile())
            self.m_musicsList.SetCellValue(music_id, 2, str(music.getVolume()))
            music_id += 1

        self.m_moviesList.AppendRows(len(self.age.getMovies()))
        movie_id = 0
        for movie in self.age.getMovies():
            self.m_moviesList.SetCellValue(movie_id, 0, movie.getId())
            self.m_moviesList.SetCellValue(movie_id, 1, movie.getFile())
            self.m_moviesList.SetCellValue(movie_id, 2, ",".join([str(x) for x in movie.getRect()]))
            if movie.getEndFunc() is not None:
                self.m_moviesList.SetCellValue(movie_id, 3, movie.getEndFunc())
            movie_id += 1

    # ---------------------------------------------------------------------------------------------

    # Do the painting on the panel where the contents of slides is drawn
    def onPaintSlideImages(self, evt):
        dc = wx.AutoBufferedPaintDC(self.m_slideImages)
        self.m_slideImages.DoPrepareDC(dc)

        dc.SetBackground(wx.WHITE_BRUSH)
        dc.Clear();

        x = 0
        y = 0

        for index, curr in enumerate(self.slideImages):
            if curr is not None and curr.IsOk():
                dc.DrawBitmap(curr, x, y)
                dc.SetPen(wx.WHITE_PEN)
                dc.DrawLine(x, 0, x, IMG_WIDTH)
            else:
                dc.SetPen(wx.RED_PEN)
                dc.SetBrush(wx.GREEN_BRUSH)
                dc.DrawRectangle(x, y, IMG_WIDTH, IMG_WIDTH)
                dc.DrawBitmap(wx.ArtProvider.GetBitmap(wx.ART_MISSING_IMAGE, size=wx.Size(48, 48)),
                              x + IMG_WIDTH / 2 - 48 / 2, y + IMG_WIDTH / 2 - 48 / 2)

            if index == 0:
                dc.DrawText('N', x + IMG_WIDTH/2, y + IMG_WIDTH + 10)
            elif index == 1:
                dc.DrawText('E', x + IMG_WIDTH/2, y + IMG_WIDTH + 10)
            elif index == 2:
                dc.DrawText('S', x + IMG_WIDTH/2, y + IMG_WIDTH + 10)
            elif index == 3:
                dc.DrawText('W', x + IMG_WIDTH/2, y + IMG_WIDTH + 10)
            elif index == 4:
                dc.DrawText('Top', x + IMG_WIDTH/2, y + IMG_WIDTH + 10)
            elif index == 5:
                dc.DrawText('Bottom', x + IMG_WIDTH/2, y + IMG_WIDTH + 10)
            x += IMG_WIDTH

        if self.minimap.getSelectedStandpoint() is not None:
            slide = self.age.getSlideNamed(self.minimap.getSelectedStandpoint())
            for curr in slide.getHotspots():
                dc.SetBrush(wx.TRANSPARENT_BRUSH)

                if curr.getDestination() is None or self.age.slideWithNameExists(curr.getDestination()):
                    dc.SetPen(wx.Pen(wx.WHITE, 3))
                else:
                    dc.SetPen(wx.Pen(wx.RED, 3))

                if curr.isPolygonHotspot():
                    coords = curr.getPolygon()
                    # center = curr.getPolygonCenter()
                    i = 0
                    while (i < len(coords) - 3):
                        x1 = (coords[i] * IMG_ZOOM)
                        y1 = (coords[i + 1] * IMG_ZOOM)
                        x2 = (coords[i + 2] * IMG_ZOOM)
                        y2 = (coords[i + 3] * IMG_ZOOM)

                        dc.DrawLine(x1, y1, x2, y2)
                        # dc.DrawLine(x1, y1, center[0]*IMG_ZOOM, center[1]*IMG_ZOOM)

                        i += 2

                    dc.SetPen(wx.Pen(wx.BLACK, 1))
                    i = 0
                    while (i < len(coords) - 3):
                        x1 = (coords[i] * IMG_ZOOM)
                        y1 = (coords[i + 1] * IMG_ZOOM)
                        x2 = (coords[i + 2] * IMG_ZOOM)
                        y2 = (coords[i + 3] * IMG_ZOOM)

                        dc.DrawLine(x1, y1, x2, y2)

                        i += 2

                    hotspot_center = curr.getPolygonCenter()
                    if curr.getCursor() in self.cursors :
                        dc.DrawBitmap(self.cursors[curr.getCursor()],
                                      hotspot_center[0] * IMG_ZOOM - 8,
                                      hotspot_center[1] * IMG_ZOOM - 8, True)

                else:
                    hotspot_x = int(curr.getRect()[0] * IMG_ZOOM)
                    hotspot_y = int(curr.getRect()[1] * IMG_ZOOM)
                    hotspot_w = int(curr.getRect()[2] * IMG_ZOOM)
                    hotspot_h = int(curr.getRect()[3] * IMG_ZOOM)

                    dc.DrawRectangle(hotspot_x, hotspot_y, hotspot_w, hotspot_h)

                    dc.SetPen(wx.Pen(wx.BLACK, 1))
                    dc.DrawRectangle(hotspot_x, hotspot_y, hotspot_w, hotspot_h)

                    if curr.getCursor() in self.cursors :
                        dc.DrawBitmap(self.cursors[curr.getCursor()], hotspot_x + 5, hotspot_y + 5, True)

            if self.addingHotspot:
                dc.SetBrush(wx.TRANSPARENT_BRUSH)
                dc.SetPen(wx.Pen(wx.WHITE, 3))

                x = self.addingHotspotCoords[0]
                y = self.addingHotspotCoords[1]
                w = self.addingHotspotCoords[2]
                h = self.addingHotspotCoords[3]

                if w < 0:
                    w = abs(w)
                    x = x - w
                if h < 0:
                    h = abs(h)
                    y = y - h

                dc.DrawRectangle(x, y, w, h)

                dc.SetPen(wx.Pen(wx.BLACK, 1))
                dc.DrawRectangle(x, y, w, h)

            elif self.addingPolygonHotspot:

                dc.SetBrush(wx.TRANSPARENT_BRUSH)
                dc.SetPen(wx.Pen(wx.WHITE, 3))

                highlight_circle = len(self.addingHotspotCoords) > 4 and distance(self.addingHotspotCoords[0], self.addingHotspotCoords[1], self.addingHotspotCoords[-2], self.addingHotspotCoords[-1]) <= 5

                if highlight_circle:
                    dc.SetPen(wx.Pen(wx.RED, 3))

                dc.DrawCircle(self.addingHotspotCoords[0], self.addingHotspotCoords[1], 5)

                if highlight_circle:
                    dc.SetPen(wx.Pen(wx.WHITE, 3))

                i = 0
                while (i < len(self.addingHotspotCoords) - 3):
                    x1 = self.addingHotspotCoords[i]
                    y1 = self.addingHotspotCoords[i + 1]
                    x2 = self.addingHotspotCoords[i + 2]
                    y2 = self.addingHotspotCoords[i + 3]

                    dc.DrawLine(x1, y1, x2, y2)

                    i += 2

                dc.SetPen(wx.Pen(wx.BLACK, 1))

                dc.DrawCircle(self.addingHotspotCoords[0], self.addingHotspotCoords[1], 5)

                i = 0
                while (i < len(self.addingHotspotCoords) - 3):
                    x1 = self.addingHotspotCoords[i]
                    y1 = self.addingHotspotCoords[i + 1]
                    x2 = self.addingHotspotCoords[i + 2]
                    y2 = self.addingHotspotCoords[i + 3]

                    dc.DrawLine(x1, y1, x2, y2)

                    i += 2

    # ---------------------------------------------------------------------------------------------

    def doImportCubeMap(self, envmapfile, slideName):

        dlg = wx.ProgressDialog("Importing...",
                                "Importing the cube map",
                                maximum=9,
                                parent=None)

        bmp = wx.Bitmap(envmapfile, wx.BITMAP_TYPE_ANY)

        dlg.Update(5)
        wx.Yield()

        if bmp.GetWidth() != 1024 * 3 or bmp.GetHeight() != 1024 * 2:
            dlg.Destroy()
            wx.MessageBox("The format preferred for 3D slides is 1024x1024 for each side of the cube")
            return

        # Blender packs the 6 faces as follows :
        #
        # +--------+--------+--------+
        # |        |        |        |
        # |  West  | South  |  East  |
        # |        |        |        |
        # +--------+--------+--------+
        # |        |        |        |
        # | Bottom |  Top   | North  |
        # |        |        |        |
        # +--------+--------+--------+
        #

        bmp_west = bmp.GetSubBitmap(wx.Rect(0, 0, 1024, 1024))
        bmp_south = bmp.GetSubBitmap(wx.Rect(1024, 0, 1024, 1024))
        bmp_east = bmp.GetSubBitmap(wx.Rect(2048, 0, 1024, 1024))
        bmp_bottom = bmp.GetSubBitmap(wx.Rect(0, 1024, 1024, 1024))
        bmp_top = bmp.GetSubBitmap(wx.Rect(1024, 1024, 1024, 1024))
        bmp_north = bmp.GetSubBitmap(wx.Rect(2048, 1024, 1024, 1024))

        dlg.Update(6)
        wx.Yield()

        slides_path = os.path.join(self.ageDir, "slides")

        if not os.path.exists(slides_path):
            os.makedirs(slides_path)

        COMPRESSION = "90"  # 0 is terrible, 100 is high-quality

        img_west = bmp_west.ConvertToImage()
        img_west.SetOption(wx.IMAGE_OPTION_QUALITY, COMPRESSION)
        img_west.SaveFile(os.path.join(slides_path, slideName + "_w.jpg"), wx.BITMAP_TYPE_JPEG)

        img_south = bmp_south.ConvertToImage()
        img_south.SetOption(wx.IMAGE_OPTION_QUALITY, COMPRESSION)
        img_south.SaveFile(os.path.join(slides_path, slideName + "_s.jpg"), wx.BITMAP_TYPE_JPEG)

        dlg.Update(7)
        wx.Yield()

        img_east = bmp_east.ConvertToImage()
        img_east.SetOption(wx.IMAGE_OPTION_QUALITY, COMPRESSION)
        img_east.SaveFile(os.path.join(slides_path, slideName + "_e.jpg"), wx.BITMAP_TYPE_JPEG)

        img_bottom = bmp_bottom.ConvertToImage()
        img_bottom.SetOption(wx.IMAGE_OPTION_QUALITY, COMPRESSION)
        img_bottom.SaveFile(os.path.join(slides_path, slideName + "_b.jpg"), wx.BITMAP_TYPE_JPEG)

        dlg.Update(8)
        wx.Yield()

        img_top = bmp_top.ConvertToImage()
        img_top.SetOption(wx.IMAGE_OPTION_QUALITY, COMPRESSION)
        img_top.SaveFile(os.path.join(slides_path, slideName + "_t.jpg"), wx.BITMAP_TYPE_JPEG)

        img_north = bmp_north.ConvertToImage()
        img_north.SetOption(wx.IMAGE_OPTION_QUALITY, COMPRESSION)
        img_north.SaveFile(os.path.join(slides_path, slideName + "_n.jpg"), wx.BITMAP_TYPE_JPEG)

        dlg.Update(9)
        wx.Yield()

        self.m_fileList.SetCellValue(0, 0, str(slideName + "_n.jpg"))
        self.m_fileList.SetCellValue(1, 0, str(slideName + "_e.jpg"))
        self.m_fileList.SetCellValue(2, 0, str(slideName + "_s.jpg"))
        self.m_fileList.SetCellValue(3, 0, str(slideName + "_w.jpg"))
        self.m_fileList.SetCellValue(4, 0, str(slideName + "_t.jpg"))
        self.m_fileList.SetCellValue(5, 0, str(slideName + "_b.jpg"))

        self.m_fileList.SetCellValue(0, 1, "")
        self.m_fileList.SetCellValue(1, 1, "")
        self.m_fileList.SetCellValue(2, 1, "")
        self.m_fileList.SetCellValue(3, 1, "")
        self.m_fileList.SetCellValue(4, 1, "")
        self.m_fileList.SetCellValue(5, 1, "")

        self.onGridEdited()
        dlg.Destroy()

    # ---------------------------------------------------------------------------------------------

    # user wants to delete a standpoint
    def onDeleteStandpoint(self, event):
        selectedSP = self.minimap.getSelectedStandpoint()

        answer = wx.MessageBox("Do you really want to delete standpoint '" + selectedSP + "'?", "Confirm", wx.OK | wx.CANCEL | wx.CENTRE)
        if answer != wx.OK:
            return

        print "You requested to delete standpoint '" + selectedSP + "'"

        if selectedSP is None or len(selectedSP) == 0:
            wx.MessageBox("Please first select a standpoint")

        self.minimap.deleteStandpoint(selectedSP)
        self.age.removeSlideNamed(selectedSP)
        self.m_toolBar.EnableTool(wx.ID_SAVE_TOOL, True)

    # ---------------------------------------------------------------------------------------------

    # user wants to save the age
    def onSave(self, event):

        self.age.clearMovies()
        self.age.clearMusics()

        for i in range(0, self.m_musicsList.GetNumberRows()):
            musicId = self.m_musicsList.GetCellValue(i, 0)
            musicFilename = self.m_musicsList.GetCellValue(i, 1)
            musicVolume = float(self.m_musicsList.GetCellValue(i, 2))
            self.age.addMusic(XMLMusic(musicId, musicFilename, musicVolume))

        for i in range(0, self.m_moviesList.GetNumberRows()):
            movieId = self.m_moviesList.GetCellValue(i, 0)
            movieFilename = self.m_moviesList.GetCellValue(i, 1)
            movieRect = [int(c) for c in self.m_moviesList.GetCellValue(i, 2).split(",")]
            movieEndFunc = self.m_moviesList.GetCellValue(i, 3)
            if len(movieEndFunc) == 0:
                movieEndFunc = None

            self.age.addMovie(XMLMovie(movieId, movieFilename, movieRect, movieEndFunc))

        asXml = xmlSerialize(self.age)
        ageFileName = os.path.join(self.ageDir, "age.xml")
        ageFile = open(ageFileName, "w+")
        ageFile.write(asXml)
        ageFile.flush()
        ageFile.close()

        notification = ToasterBox(self)
        notification.SetPopupSize(wx.Size(150, 75))
        notification.SetPopupText("Age saved successfully")
        notification.SetPopupPositionByInt(3)
        notification.Play()

        self.m_toolBar.EnableTool(wx.ID_SAVE_TOOL, False)

    # ---------------------------------------------------------------------------------------------

    def onExit(self, event):
        self.Close()

    # ---------------------------------------------------------------------------------------------

    def onClose(self, event):
        if self.m_toolBar.GetToolEnabled(wx.ID_SAVE_TOOL):
            answer = wx.MessageBox("You appear to have unsaved changes. Do you want to save before exiting?",
                                   "Unsaved changes", wx.YES | wx.CANCEL | wx.NO)
            if answer == wx.YES:
                self.onSave(event)
            elif answer == wx.CANCEL:
                return

        self.Destroy()

    # ---------------------------------------------------------------------------------------------

    # User clicked on a standpoint in the minimap
    def standpointSelected(self, standpoint):

        wx.BeginBusyCursor()

        try:
            self.ignoreNameChangeEvent = True
            self.m_standpointName.Enable(True)
            self.m_standpointName.SetValue(standpoint)
            self.ignoreNameChangeEvent = False

            self.m_startCheckbox.SetValue(self.age.start == standpoint)

            slide = self.age.getSlideNamed(standpoint)

            if slide.is3DSlide():
                self.m_standpointType.SetLabel("3D Standpoint")
            else:
                self.m_standpointType.SetLabel("2D Slide")

            self.m_saveNameBtn.Enable(False)
            self.m_fileList.Enable(True)
            self.m_onEntrance.Enable(True)
            self.m_onExit.Enable(True)

            onentrance = slide.getOnEntranceScript()
            if onentrance is None:
                onentrance = ""
            self.m_onEntrance.ChangeValue(onentrance)

            onexit = slide.getOnExitScript()
            if onexit is None:
                onexit = ""
            self.m_onExit.ChangeValue(onexit)

            for i in range(0, 6):
                self.m_fileList.SetCellValue(i, 0, "")
                self.m_fileList.SetCellValue(i, 1, "")

            self.slideImages = []

            files = slide.getFiles()
            l = wx.LogNull()  # shut up warnings, when images don't load it will be visible enough in the panel
            for i in range(0, len(files)):
                self.m_fileList.SetCellValue(i, 0, str(files[i].getPath()))

                archive = files[i].getArchive()
                if archive is None: archive = ""
                self.m_fileList.SetCellValue(i, 1, str(archive))

                # TODO: support for archives
                filepath = os.path.join(self.ageDir, "slides", files[i].getPath())
                print "Loading", filepath
                tmp_bmp = wx.Image(filepath, wx.BITMAP_TYPE_ANY)
                if tmp_bmp.IsOk():
                    tmp_bmp.Rescale(tmp_bmp.GetWidth() / 2, tmp_bmp.GetHeight() / 2, wx.IMAGE_QUALITY_HIGH)
                    self.slideImages.append(tmp_bmp.ConvertToBitmap())
                else:
                    self.slideImages.append(None)

            if slide.is3DSlide():
                self.m_fileList.SetRowLabelValue(0, "North")
                self.m_fileList.SetRowLabelValue(1, "East")
                self.m_fileList.SetRowLabelValue(2, "South")
                self.m_fileList.SetRowLabelValue(3, "West")
                self.m_fileList.SetRowLabelValue(4, "Top")
                self.m_fileList.SetRowLabelValue(5, "Bottom")
            else:
                self.m_fileList.SetRowLabelValue(0, "Slide")
                self.m_fileList.SetRowLabelValue(1, "-")
                self.m_fileList.SetRowLabelValue(2, "-")
                self.m_fileList.SetRowLabelValue(3, "-")
                self.m_fileList.SetRowLabelValue(4, "-")
                self.m_fileList.SetRowLabelValue(5, "-")

            self.m_slideImages.SetScrollbars(1, 1, 513 * len(files), 512, 0, 0);
            self.m_slideImages.Refresh()
        finally:
            wx.EndBusyCursor()

    # ---------------------------------------------------------------------------------------------

    # user started typing a new endpoint name
    def onStandpointNameEdited(self, event):
        self.m_saveNameBtn.Enable()

    # ---------------------------------------------------------------------------------------------

    # User wants to save the name of a standpoint
    def onSaveStandpointName(self, event):
        if self.ignoreNameChangeEvent: return

        newname = self.m_standpointName.GetValue()

        print "SP renamed to '" + newname + "'"

        slide = self.age.getSlideNamed(self.minimap.getSelectedStandpoint())
        slide.setId(newname)

        self.minimap.renameSelectedStandpoint(newname)
        self.m_saveNameBtn.Enable(False)
        self.m_toolBar.EnableTool(wx.ID_SAVE_TOOL, True)

    # ---------------------------------------------------------------------------------------------

    # user clicked on the "Select map" toolbar button
    def onSelectMap(self, event):

        mapfile = wx.LoadFileSelector("Select which file to use as background for the minimap", "*")
        if mapfile is None or len(mapfile) == 0:
            return

        if os.path.exists(os.path.join(self.ageDir, "minimap.png")):
            os.remove(os.path.join(self.ageDir, "minimap.png"))
        if os.path.exists(os.path.join(self.ageDir, "minimap.jpg")):
            os.remove(os.path.join(self.ageDir, "minimap.jpg"))

        if mapfile.endswith("png"):
            shutil.copy(mapfile, os.path.join(self.ageDir, "minimap.png"))
        elif mapfile.endswith("jpg") or mapfile.EndsWith("jpeg"):
            shutil.copy(mapfile, os.path.join(self.ageDir, "minimap.jpg"))
        else:
            wx.MessageBox("Please select a PNG or JPEG file")
            return

        self.backgroundImg = None

        bgImagePath = os.path.join(self.ageDir, "minimap.png")

        if os.path.exists(bgImagePath):
            self.backgroundImg = wx.Bitmap(bgImagePath, wx.BITMAP_TYPE_PNG)
        else:
            bgImagePath = os.path.join(self.ageDir, "minimap.jpg")
            if os.path.exists(bgImagePath):
                self.backgroundImg = wx.Bitmap(bgImagePath, wx.BITMAP_TYPE_JPEG)

        self.minimap.backgroundImg = self.backgroundImg
        self.minimap.Refresh()

    # ---------------------------------------------------------------------------------------------

    def onGridCellRightClick(self, event):

        selected = self.minimap.getSelectedStandpoint()
        if selected is None or len(selected) == 0:
            return

        m = FileListRightClickMenu(self, self.ageDir, self.minimap.getSelectedStandpoint(), self.m_fileList,
                                   event.GetRow(), lambda: self.onGridEdited())
        self.m_fileList.PopupMenu(m, event.GetPosition())

    # ---------------------------------------------------------------------------------------------

    def onGridEdited(self, event=None):

        selected = self.minimap.getSelectedStandpoint()
        if selected is None or len(selected) == 0:
            return

        slide = self.age.getSlideNamed(selected)

        def nullIfEmpty(x):
            if len(x) == 0: return None
            else: return x

        if slide.is3DSlide():
            for i in range(0, 6):
                slide.file[i].setPath(self.m_fileList.GetCellValue(i, 0).strip(),
                              nullIfEmpty(self.m_fileList.GetCellValue(i, 1).strip()))
        else:
            slide.file[0].setPath(self.m_fileList.GetCellValue(0, 0).strip(),
                              nullIfEmpty(self.m_fileList.GetCellValue(0, 1).strip()))

        self.m_toolBar.EnableTool(wx.ID_SAVE_TOOL, True)
        self.standpointSelected(self.minimap.getSelectedStandpoint())  # refresh displayed images

        self.Raise()

    # ---------------------------------------------------------------------------------------------

    def onModification(self):
        self.m_toolBar.EnableTool(wx.ID_SAVE_TOOL, True)

    # ---------------------------------------------------------------------------------------------

    def onCreateStandpoint(self, name):
        self.minimap.selectStandpointNamed(name)
        self.m_toolBar.EnableTool(wx.ID_SAVE_TOOL, True)

    # ---------------------------------------------------------------------------------------------

    def onMiddleMouseButtonDown(self, evt):
        self.m_slideImages.SetFocus()

        self.middleMouseButtonDown = True
        self.m_slideImages.CaptureMouse()
        self.drag_previous_x = evt.GetX()
        self.drag_previous_y = evt.GetY()

    # ---------------------------------------------------------------------------------------------

    def onMiddleMouseButtonUp(self, evt):
        if self.m_slideImages.HasCapture():
            self.m_slideImages.ReleaseMouse()
        self.middleMouseButtonDown = False

    # ---------------------------------------------------------------------------------------------

    def onMouseButtonDown(self, evt):

        self.m_slideImages.SetFocus()

        if self.minimap.getSelectedStandpoint() is None:
            return

        scroll = self.m_slideImages.GetViewStart()
        scrolled_x = evt.GetX() + scroll[0]
        scrolled_y = evt.GetY() + scroll[1]
        slide = self.age.getSlideNamed(self.minimap.getSelectedStandpoint())


        for h in slide.getHotspots():

            if (h.isPolygonHotspot()):
                hotspot_center = h.getPolygonCenter()
                if (scrolled_x >= hotspot_center[0] * IMG_ZOOM - 8 and
                    scrolled_y >= hotspot_center[1] * IMG_ZOOM - 8 and
                    scrolled_x <= hotspot_center[0] * IMG_ZOOM + 9 and
                    scrolled_y <= hotspot_center[1] * IMG_ZOOM + 9):
                    self.m_toolBar.EnableTool(wx.ID_SAVE_TOOL, True)
                    dlg = IlathidHotspotDialog(self, h, self.cursors, self.age, self.ageDir, slide, self.backgroundImg,
                                                lambda: self.onHotspotDialogClosed())
                    dlg.Center()
                    dlg.ShowModal()
                    return
                else:
                    continue

            hx = int(h.getRect()[0] * IMG_ZOOM)
            hy = int(h.getRect()[1] * IMG_ZOOM)
            if scrolled_x >= hx + 5 and scrolled_y >= hy + 5 and scrolled_x <= hx + 5 + 17 and scrolled_y <= hy + 5 + 17:
                self.m_toolBar.EnableTool(wx.ID_SAVE_TOOL, True)
                dlg = IlathidHotspotDialog(self, h, self.cursors, self.age, self.ageDir, slide, self.backgroundImg,
                                            lambda: self.onHotspotDialogClosed())
                dlg.Center()
                dlg.ShowModal()
                return

        (hotspotId, isPolygonal, hotspotSide) = self.isHotspotUnderTheMouse(slide, scrolled_x, scrolled_y)

        if not self.addingHotspot and not self.addingPolygonHotspot and not self.resizingHotspot:
            if hotspotId != -1:
                if isPolygonal:
                    self.resizingPolygonalHotspot = True
                    self.resizingHotspotId = hotspotId
                    self.resizingHotspotSide = hotspotSide
                else:
                    self.resizingHotspot = True
                    self.resizingHotspotId = hotspotId
                    self.resizingHotspotSide = hotspotSide
            elif self.minimap.getSelectedStandpoint() is not None and self.tool == TOOL_RECTANGLE:
                self.addingHotspot = True
                scroll = self.m_slideImages.GetViewStart()
                self.addingHotspotCoords = [evt.GetX() + scroll[0], evt.GetY() + scroll[1], 1, 1]
                self.m_slideImages.CaptureMouse()
            elif self.minimap.getSelectedStandpoint() is not None and self.tool == TOOL_POLYGON:
                self.addingPolygonHotspot = True
                self.addingHotspot = False
                scroll = self.m_slideImages.GetViewStart()
                self.addingHotspotCoords = [evt.GetX() + scroll[0], evt.GetY() + scroll[1]]

    # ---------------------------------------------------------------------------------------------

    def onMouseButtonUp(self, evt):
        if self.m_slideImages.HasCapture():
            self.m_slideImages.ReleaseMouse()

        if self.resizingHotspot:
            self.resizingHotspot = False
            self.m_toolBar.EnableTool(wx.ID_SAVE_TOOL, True)
        elif self.resizingPolygonalHotspot:
            self.resizingPolygonalHotspot = False
            self.m_toolBar.EnableTool(wx.ID_SAVE_TOOL, True)

        if self.addingHotspot and self.tool == TOOL_RECTANGLE:
            self.addingHotspot = False

            x = int(self.addingHotspotCoords[0] / IMG_ZOOM)
            y = int(self.addingHotspotCoords[1] / IMG_ZOOM)
            w = int(self.addingHotspotCoords[2] / IMG_ZOOM)
            h = int(self.addingHotspotCoords[3] / IMG_ZOOM)

            if w < 0:
                w = abs(w)
                x = x - w
            if h < 0:
                h = abs(h)
                y = y - h

            if w < 5 or h < 5:
                self.m_slideImages.Refresh()
                return

            slide = self.age.getSlideNamed(self.minimap.getSelectedStandpoint())
            hotspot = XMLHotspot('forward', [x, y, w, h], "")
            slide.addHotspot(hotspot)
            self.m_toolBar.EnableTool(wx.ID_SAVE_TOOL, True)

            dlg = IlathidHotspotDialog(self, hotspot, self.cursors, self.age, self.ageDir, slide, self.backgroundImg,
                                        lambda: self.onHotspotDialogClosed())
            dlg.Center()
            dlg.ShowModal()
        elif self.addingPolygonHotspot and self.tool == TOOL_POLYGON:
            # x1 = int(self.addingHotspotCoords[0]/IMG_ZOOM)
            # y1 = int(self.addingHotspotCoords[1]/IMG_ZOOM)
            # x2 = int(self.addingHotspotCoords[2]/IMG_ZOOM)
            # y2 = int(self.addingHotspotCoords[3]/IMG_ZOOM)

            end_polygon = len(self.addingHotspotCoords) > 4 and distance(self.addingHotspotCoords[0], self.addingHotspotCoords[1], self.addingHotspotCoords[-2], self.addingHotspotCoords[-1]) <= 5

            if end_polygon:
                self.addingHotspotCoords[-2] = self.addingHotspotCoords[0]
                self.addingHotspotCoords[-1] = self.addingHotspotCoords[1]

                self.addingPolygonHotspot = False
                slide = self.age.getSlideNamed(self.minimap.getSelectedStandpoint())
                points = [int(p / IMG_ZOOM) for p in self.addingHotspotCoords]

                hotspot = XMLHotspot('forward', [], "", polygon=points)
                slide.addHotspot(hotspot)
                self.m_toolBar.EnableTool(wx.ID_SAVE_TOOL, True)

                dlg = IlathidHotspotDialog(self, hotspot, self.cursors, self.age, self.ageDir, slide, self.backgroundImg,
                                            lambda: self.onHotspotDialogClosed())
                dlg.Center()
                dlg.ShowModal()
            else:
                # add point to the polygon
                self.addingHotspotCoords += [self.addingHotspotCoords[-2], self.addingHotspotCoords[-1]]

            self.m_slideImages.Refresh()

        self.m_slideImages.Refresh()

    # ---------------------------------------------------------------------------------------------

    # Check if there's a hotspot under the mouse, and if so return which side of the hotspot is under
    # Return : None if no side of the hotspot is under the mouse, otherwise
    #          wx.LEFT, wx.RIGHT, wx.TOP or wx.BOTTOM for a rectangular hotspot, or point ID for
    #          a polygonal hotspot
    def isHotspotUnderTheMouse(self, slide, scrolled_x, scrolled_y):
        hotspotSide = None
        hotspotId = -1
        isPolygonal = False

        for i in range(0, len(slide.getHotspots())):
            curr = slide.getHotspots()[i]
            # TODO: handle polygonal hotspots
            if (curr.isPolygonHotspot()):
                isPolygonal = True
                p = 0
                while p < len(curr.getPolygon()) - 3:
                    if distance(curr.getPolygon()[p] * IMG_ZOOM, curr.getPolygon()[p + 1] * IMG_ZOOM, scrolled_x, scrolled_y) <= 5:
                        return (i, isPolygonal, p)
                    p += 2
                continue

            hp_x1 = int(curr.getRect()[0] * IMG_ZOOM)
            hp_y1 = int(curr.getRect()[1] * IMG_ZOOM)
            hp_x2 = hp_x1 + int(curr.getRect()[2] * IMG_ZOOM)
            hp_y2 = hp_y1 + int(curr.getRect()[3] * IMG_ZOOM)

            if scrolled_x > hp_x1 + 2 and scrolled_x < hp_x2 - 2:
                if scrolled_y > hp_y1 - 5 and scrolled_y < hp_y1 + 5:
                    hotspotSide = wx.TOP
                    hotspotId = i
                    break
                if scrolled_y > hp_y2 - 5 and scrolled_y < hp_y2 + 5:
                    hotspotSide = wx.BOTTOM
                    hotspotId = i
                    break

            if scrolled_y > hp_y1 and scrolled_y < hp_y2:
                if scrolled_x > hp_x1 - 5 and scrolled_x < hp_x1 + 5:
                    hotspotSide = wx.LEFT
                    hotspotId = i
                    break
                if scrolled_x > hp_x2 - 5 and scrolled_x < hp_x2 + 5:
                    hotspotSide = wx.RIGHT
                    hotspotId = i
                    break

        return (hotspotId, isPolygonal, hotspotSide)

    # ---------------------------------------------------------------------------------------------

    # Callback invoked when the user moves their mouse over the slides/hotspots panel
    def onMouseMove(self, evt):

        if self.resizingHotspot:
            slide = self.age.getSlideNamed(self.minimap.getSelectedStandpoint())
            hotspot = slide.getHotspots()[self.resizingHotspotId]

            scroll = self.m_slideImages.GetViewStart()
            scrolled_x = evt.GetX() + scroll[0]
            scrolled_y = evt.GetY() + scroll[1]

            x = int(hotspot.getRect()[0] * IMG_ZOOM)
            y = int(hotspot.getRect()[1] * IMG_ZOOM)
            w = int(hotspot.getRect()[2] * IMG_ZOOM)
            h = int(hotspot.getRect()[3] * IMG_ZOOM)

            # For now a click area must be contained inside *one* image
            # img_id = int(x / IMG_WIDTH)
            # to_id = int(scrolled_x / IMG_WIDTH)
            # if to_id > img_id:
            #    scrolled_x = (img_id + 1) * IMG_WIDTH - 1
            # elif to_id < img_id:
            #    scrolled_x = img_id * IMG_WIDTH

            if self.resizingHotspotSide == wx.RIGHT:
                hotspot.setRect(map(lambda x: int(x / IMG_ZOOM), [x, y, max(5, scrolled_x - x), h]))
                self.m_slideImages.Refresh()
            elif self.resizingHotspotSide == wx.BOTTOM:
                hotspot.setRect(map(lambda x: int(x / IMG_ZOOM), [x, y, w, max(5, scrolled_y - y)]))
                self.m_slideImages.Refresh()
            elif self.resizingHotspotSide == wx.TOP:
                last_y = y + h
                hotspot.setRect(map(lambda x: int(x / IMG_ZOOM), [x, min(scrolled_y, last_y - 5), w, last_y - min(scrolled_y, last_y - 5)]))
                self.m_slideImages.Refresh()
            elif self.resizingHotspotSide == wx.LEFT:
                last_x = x + w
                hotspot.setRect(map(lambda x: int(x / IMG_ZOOM), [min(scrolled_x, last_x - 5), y, last_x - min(scrolled_x, last_x - 5), h]))
                self.m_slideImages.Refresh()

        elif self.resizingPolygonalHotspot:

            slide = self.age.getSlideNamed(self.minimap.getSelectedStandpoint())
            hotspot = slide.getHotspots()[self.resizingHotspotId]

            scroll = self.m_slideImages.GetViewStart()
            scrolled_x = evt.GetX() + scroll[0]
            scrolled_y = evt.GetY() + scroll[1]

            x = int(scrolled_x / IMG_ZOOM)
            y = int(scrolled_y / IMG_ZOOM)

            hotspot.getPolygon()[self.resizingHotspotSide] = x
            hotspot.getPolygon()[self.resizingHotspotSide + 1] = y

            # First and last point must stay in sync
            if self.resizingHotspotSide == 0:
                hotspot.getPolygon()[-2] = x
                hotspot.getPolygon()[-1] = y
            elif self.resizingHotspotSide == len(hotspot.getPolygon()) - 2:
                hotspot.getPolygon()[0] = x
                hotspot.getPolygon()[1] = y

            self.m_slideImages.Refresh()

        elif self.addingHotspot:
            scroll = self.m_slideImages.GetViewStart()
            to_x = evt.GetX() + scroll[0]
            to_y = evt.GetY() + scroll[1]

            # For now a click area must be contained inside *one* image
            # img_id = int(self.addingHotspotCoords[0] / IMG_WIDTH)
            # to_id = int(to_x / IMG_WIDTH)
            # if to_id > img_id:
            #    to_x = (img_id + 1) * IMG_WIDTH - 1
            # elif to_id < img_id:
            #    to_x = img_id * IMG_WIDTH

            self.addingHotspotCoords[2] = to_x - self.addingHotspotCoords[0]
            self.addingHotspotCoords[3] = to_y - self.addingHotspotCoords[1]
            self.m_slideImages.Refresh()

        elif self.addingPolygonHotspot:
            scroll = self.m_slideImages.GetViewStart()
            self.addingHotspotCoords[-2] = evt.GetX() + scroll[0]
            self.addingHotspotCoords[-1] = evt.GetY() + scroll[1]
            self.m_slideImages.Refresh()

        elif self.middleMouseButtonDown:
            d_x = self.drag_previous_x - evt.GetX()
            d_y = self.drag_previous_y - evt.GetY()

            scroll = self.m_slideImages.GetViewStart()
            self.m_slideImages.Scroll(max(0, scroll.x + d_x), max(0, scroll.y + d_y))

            self.drag_previous_x = evt.GetX()
            self.drag_previous_y = evt.GetY()
            self.m_slideImages.SetCursor(self.panCursor)

        elif self.minimap.getSelectedStandpoint() is not None:
            # Show cursor when mouse is over the sides of a hotspot
            scroll = self.m_slideImages.GetViewStart()
            scrolled_x = evt.GetX() + scroll[0]
            scrolled_y = evt.GetY() + scroll[1]
            slide = self.age.getSlideNamed(self.minimap.getSelectedStandpoint())

            (hotspotId, isPolygonal, hotspotSide) = self.isHotspotUnderTheMouse(slide, scrolled_x, scrolled_y)

            if hotspotId != -1:
                if isPolygonal:
                    self.m_slideImages.SetCursor(self.moveCursor)
                elif hotspotSide == wx.TOP or hotspotSide == wx.BOTTOM:
                    self.m_slideImages.SetCursor(self.resizeVerticallyCursor)
                elif hotspotSide == wx.LEFT or hotspotSide == wx.RIGHT:
                    self.m_slideImages.SetCursor(self.resizeHorizontallyCursor)
                else:
                    self.m_slideImages.SetCursor(wx.NullCursor)
            else:
                self.m_slideImages.SetCursor(wx.NullCursor)

    # ---------------------------------------------------------------------------------------------

    def onKeyDown(self, evt):
        if evt.GetKeyCode() == WXK_ESCAPE and self.addingHotspot:
            self.addingHotspot = False
            self.m_slideImages.Refresh()

    # ---------------------------------------------------------------------------------------------

    def onEntranceScriptEdited(self, event):
        slide = self.age.getSlideNamed(self.minimap.getSelectedStandpoint())
        if len(self.m_onEntrance.GetValue()) > 0:
            slide.setOnEntranceScript(self.m_onEntrance.GetValue())
        else:
            slide.setOnEntranceScript(None)
        self.m_toolBar.EnableTool(wx.ID_SAVE_TOOL, True)

    # ---------------------------------------------------------------------------------------------

    def onExitScriptEdited(self, event):
        slide = self.age.getSlideNamed(self.minimap.getSelectedStandpoint())
        if len(self.m_onExit.GetValue()) > 0:
            slide.setOnExitScript(self.m_onExit.GetValue())
        else:
            slide.setOnExitScript(None)
        self.m_toolBar.EnableTool(wx.ID_SAVE_TOOL, True)

    # ---------------------------------------------------------------------------------------------

    def onAddMovie(self, event):
        if not self.m_moviesList.AppendRows():
            wx.MessageBox("Unexpected failure adding new movie row :(")
            return

        rowId = self.m_moviesList.GetNumberRows() - 1
        self.m_moviesList.SetCellValue(rowId, 0, "movie" + str(rowId + 1))
        self.m_moviesList.SetCellValue(rowId, 1, "movie" + str(rowId + 1) + ".mpg")
        self.m_moviesList.SetCellValue(rowId, 2, "0,0,1024,768")
        self.m_moviesList.SetFocus()  # get the focus off the button, it's too easy to hit enter

    # ---------------------------------------------------------------------------------------------

    def onAddMusic(self, event):
        if not self.m_musicsList.AppendRows():
            wx.MessageBox("Unexpected failure adding new music row :(")
            return

        rowId = self.m_musicsList.GetNumberRows() - 1
        self.m_musicsList.SetCellValue(rowId, 0, "music" + str(rowId + 1))
        self.m_musicsList.SetCellValue(rowId, 1, "music" + str(rowId + 1) + ".mp3")
        self.m_musicsList.SetCellValue(rowId, 2, "1.0")
        self.m_musicsList.SetCellEditor(rowId, 2, wx.grid.GridCellFloatEditor())
        self.m_musicsList.SetFocus()  # get the focus off the button, it's too easy to hit enter

    # ---------------------------------------------------------------------------------------------

    def doDeleteMovie(self, movieId):
        answer = wx.MessageBox("Do you really want to delete movie '" + self.age.getMovies()[movieId].getId() + "'?",
                               "Confirm", wx.OK | wx.CANCEL | wx.CENTRE)
        if answer != wx.OK:
            return

        self.m_moviesList.DeleteRows(movieId)

    # ---------------------------------------------------------------------------------------------

    def doDeleteMusic(self, musicId):
        answer = wx.MessageBox("Do you really want to delete music '" + self.age.getMusics()[musicId].getId() + "'?",
                               "Confirm", wx.OK | wx.CANCEL | wx.CENTRE)
        if answer != wx.OK:
            return

        self.m_musicsList.DeleteRows(musicId)

    # ---------------------------------------------------------------------------------------------

    def moviesListRightClick(self, evt):
        menu = DeleteRightClickMenu(lambda: self.doDeleteMovie(evt.GetRow()))
        self.m_moviesList.PopupMenu(menu, evt.GetPosition())

    # ---------------------------------------------------------------------------------------------

    def musicListRightClick(self, evt):
        menu = DeleteRightClickMenu(lambda: self.doDeleteMusic(evt.GetRow()))
        self.m_musicsList.PopupMenu(menu, evt.GetPosition())

    # ---------------------------------------------------------------------------------------------

    def onStartCheckbox(self, event):
        if self.m_startCheckbox.GetValue():
            self.age.start = self.minimap.getSelectedStandpoint()
            self.minimap.setHomeStandpoint(self.age.start)
        else:
            wx.MessageBox("You can't uncheck this checkbox, I don't know what other standpoint I should take now! Instead go check this checkbox in another standpoint")
            self.m_startCheckbox.SetValue(True)

    # ---------------------------------------------------------------------------------------------

    def onSelectToolRectangle(self, event):
        self.tool = TOOL_RECTANGLE
        self.m_polygonTool.SetBackgroundColour(wx.NullColour)
        self.m_rectangleTool.SetBackgroundColour(wx.Colour(86, 155, 228))

    # ---------------------------------------------------------------------------------------------

    def onSelectToolPolygon(self, event):
        self.tool = TOOL_POLYGON
        self.m_rectangleTool.SetBackgroundColour(wx.NullColour)
        self.m_polygonTool.SetBackgroundColour(wx.Colour(86, 155, 228))

    # ---------------------------------------------------------------------------------------------

    def onHotspotDialogClosed(self):
        self.m_slideImages.Refresh()
        self.minimap.updateLines()

    # ---------------------------------------------------------------------------------------------

    def onGeneratePython(self, event):
        filepath = wx.SaveFileSelector("Save the Python file", "*.py", self.age.name + ".py")
        if filepath is None or len(filepath) == 0:
            return

        print "Saving file to '" + filepath + "'"
        myfile = open(filepath, "w")

        # TODO: include functions declared in the UI
        AGE_TEMPLATE = """import pygame

from engine.gametimer import timer
from engine.age import age
from engine.FilePath import FilePath
from engine.SlideManager import SlideManager


class $AGENAME(age):

    def __init__(self):
        super($AGENAME, self).__init__("data/ages/$AGENAME/age.xml", $AGENAME)"""

        myfile.write(AGE_TEMPLATE.replace("$AGENAME", self.age.name))
        myfile.flush()
        myfile.close()




